import flixel.FlxG;

import funkin.audio.FunkinSound;

import funkin.graphics.FunkinCamera;

import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.modding.module.ModuleHandler;

import funkin.Paths;

import haxe.Unserializer;

class LoadPresetSubState extends ScriptedMusicBeatSubState
{

    var saveModule;
    var save;

    var settingsModule;

    var camera;

    var TextMenuList = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.TextMenuList");
    var AtlasText = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.AtlasText");

    var selectPresetText;

    var presetTextList;

    var firstFrame = false;

    public override function new()
    {
        super();
        firstFrame = true;

        saveModule = ModuleHandler.getModule("FNF Note Randomizer Save");
        settingsModule = ModuleHandler.getModule("FNF Note Randomizer Settings Injector");

        save = saveModule.scriptGet("save");

        camera = new FunkinCamera("Load Randomizer Preset Camera", 0, 0, FlxG.width, FlxG.height);
        FlxG.cameras.add(camera, true);
        this.cameras = [camera];

        selectPresetText = new AtlasText(0, 100, "Presets", "bold");
        selectPresetText.x = (FlxG.width - selectPresetText.width) / 2;

        add(selectPresetText);

        presetTextList = new TextMenuList();

        for (preset in save["presets"].keys())
        {
            var preset = preset;
            var presetText = presetTextList.createItem(0, 120 * presetTextList.length + 300, preset, "bold", () -> {loadPreset(preset);});
            presetText.x = 50;
        }

        add(presetTextList);

        FunkinSound.playOnce(Paths.sound("scrollMenu"));

        FlxG.state.persistentUpdate = false;
    }

    public override function update(elapsed:Float)
    {
        if (firstFrame)
        {
            firstFrame = false;
            return;
        }

        camera.target = presetTextList.selectedItem;
        if (camera.targetOffset != null) camera.targetOffset.x = -presetTextList.selectedItem.width / 2 + FlxG.width / 2 - 50;

        super.update(elapsed);

        if (controls.BACK)
        {
            closeSelf();
            FunkinSound.playOnce(Paths.sound("cancelMenu"));
        }
    }

    public function loadPreset(name:String)
    {

        for (key in save["presets"][name].keys()) save[key] = save["presets"][name][key];

        saveModule.scriptCall("saveSettings");
        settingsModule.scriptCall("createSettings");

        closeSelf();
    }

    public function closeSelf()
    {
        FlxG.cameras.remove(camera);

        FlxG.state.closeSubState();
        FlxG.state.persistentUpdate = true;
    }
}