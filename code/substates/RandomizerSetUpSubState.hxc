import flixel.FlxG;

import funkin.audio.FunkinSound;

import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.modding.module.ModuleHandler;

import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;

import funkin.Paths;

import funkin.play.PlayState;

import haxe.Json;
import haxe.Unserializer;

import StringTools;

class RandomizerSetUpSubState extends ScriptedMusicBeatSubState
{

    var randomizer;
    var currentSettings;

    var camera;

    var options;
    var questionText;

    var TextMenuList = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.TextMenuList");
    var AtlasText = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.AtlasText");

    var FileSystem = Unserializer.DEFAULT_RESOLVER.resolveClass("sys.FileSystem");
    var File = Unserializer.DEFAULT_RESOLVER.resolveClass("sys.io.File");

    var savedCharts;
    var chartFolder;

    override public function new()
    {
        super();

        savedCharts = [];

        randomizer = ModuleHandler.getModule("FNF Note Randomizer");

        chartFolder = randomizer.scriptGet("modFolderPath") + "/chartsaves/" + PlayState.instance.currentSong.id + "-" + PlayState.instance.currentVariation + "-" + PlayState.instance.currentDifficulty;

        if (FileSystem.exists(chartFolder)) savedCharts = [for (file in FileSystem.readDirectory(chartFolder)) if (StringTools.endsWith(file, ".json") && !FileSystem.isDirectory(chartFolder + "/" + file)) StringTools.replace(file, ".json", "")];

        currentSettings = randomizer.scriptGet("currentSettings");
        currentSettings["trueRandomDirections"] = false;

        camera = new FunkinCamera("Randomizer Set Up State Camera", 0, 0, FlxG.width, FlxG.height);

        FlxG.cameras.add(camera);
        this.cameras = [camera];

        var background = new FunkinSprite(0, 0);
        background.makeSolidColor(FlxG.width, FlxG.height, 0xFF000000);
        background.alpha = 0.5;
        background.scrollFactor.set(0, 0);
        background.updateHitbox();

        add(background);

        questionText = new AtlasText(0, 60, "Use Note Randomizer?", "bold");
        questionText.x = (FlxG.width - questionText.width) / 2;

        options = new TextMenuList();
        
        options.createItem(0, 210, "Use Current Settings", "bold", () -> {randomizer.scriptSet("randomizerActive", true); exit();});
        options.createItem(0, 310, "Use Preset", "bold", openLoadPresetSubState);
        options.createItem(0, 410, "Use True Random", "bold", setToTrueRandomAndExit);

        noY = 510;

        if (savedCharts.length > 0)
        {
            options.createItem(0, 510, "Load Saved Chart", "bold", openLoadSavedChartSubState);
            noY += 100;
        }

        options.createItem(0, noY, "No", "bold", exit);

        for (option in options) option.x = (FlxG.width - option.width) / 2;

        add(questionText);
        add(options);
    }

    override public function update(elapsed:Float):Void
    {
        super.update(elapsed);

        if (controls.BACK) {
            exit();
            FunkinSound.playOnce(Paths.sound("cancelMenu"));
        }
    }

    public function exit():Void
    {
        randomizer.scriptSet("ranSetUpMenu", true);
        FlxG.cameras.remove(camera);
        PlayState.instance.closeSubState();
        PlayState.instance.startCountdown();
    }

    public function openLoadPresetSubState():Void
    {
        remove(questionText);
        remove(options);

        openSubState(ScriptedMusicBeatSubState.init("SetUpLoadPresetSubState", [this, currentSettings]));
    }

    public function openLoadSavedChartSubState():Void
    {
        remove(questionText);
        remove(options);

        openSubState(ScriptedMusicBeatSubState.init("LoadSavedChartSubState", [this]));
    }

    public function closeSubState():Void
    {
        super.closeSubState();

        add(questionText);
        add(options);
    }

    public function setToTrueRandomAndExit():Void
    {
        currentSettings["trueRandomDirections"] = true;
        
        randomizer.scriptSet("currentSettings", currentSettings);
        randomizer.scriptSet("randomizerActive", true);

        exit();
    }
}

class LoadSavedChartSubState extends ScriptedMusicBeatSubState
{

    var state;
    var savedCharts;

    var TextMenuList = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.TextMenuList");
    var AtlasText = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.AtlasText");

    var File;

    var selectedItemIndex = 0;

    var chartTextList;
    var selectChartText;

    var randomizer;
    var chartFolder;

    override public function new(params)
    {
        super();
        state = params[0];

        File = state.File;
        
        randomizer = state.randomizer;

        savedCharts = state.savedCharts;
        chartFolder = state.chartFolder;

        chartTextList = new TextMenuList();

        selectChartText = new AtlasText(0, 100, "Saved Charts", "bold");
        selectChartText.x = (FlxG.width - selectChartText.width) / 2;

        add(selectChartText);

        for (chart in savedCharts)
        {
            var chart = chart; // Store this as a variable because the callback won't recognize it otherwise
            var chartText = chartTextList.createItem(0, 120 * chartTextList.length + 300, chart, "bold", () -> {loadChart(chart);});
            chartText.x = 50;
        }

        add(chartTextList);
    }

    override public function update(elapsed:Float):Void
    {

        if (controls.BACK)
        {
            exit();
            FunkinSound.playOnce(Paths.sound("cancelMenu"));
            return;
        }

        super.update(elapsed);

        if (controls.UI_DOWN_P)
        {

            selectedItemIndex++;

            selectChartText.y -= 120;
            for (chartText in chartTextList) chartText.y -= 120;

            if (selectedItemIndex == chartTextList.length)
            {
                selectedItemIndex = 0;

                selectChartText.y += 120 * chartTextList.length;
                for (chartText in chartTextList) chartText.y += 120 * chartTextList.length;
            }
        }

        if (controls.UI_UP_P)
        {

            selectedItemIndex--;

            selectChartText.y += 120;
            for (chartText in chartTextList) chartText.y += 120;

            if (selectedItemIndex == -1)
            {
                selectedItemIndex = chartTextList.length - 1;

                selectChartText.y -= 120 * chartTextList.length;
                for (chartText in chartTextList) chartText.y -= 120 * chartTextList.length;
            }
        }
    }

    public function loadChart(chart:String):Void
    {

        var chartData = Json.parse(File.getContent(chartFolder + "/" + chart + ".json"));

        for (index in 0...PlayState.instance.playerStrumline.noteData.length) PlayState.instance.playerStrumline.noteData[index].data = chartData.playerNoteData[index];
        for (index in 0...PlayState.instance.opponentStrumline.noteData.length) PlayState.instance.opponentStrumline.noteData[index].data = chartData.opponentNoteData[index];

        randomizer.scriptSet("readingFromChart", true);
        state.exit();
    }

    public function exit():Void
    {
        remove(selectChartText);
        remove(chartTextList);
        state.closeSubState();
    }
}

class SetUpLoadPresetSubState extends ScriptedMusicBeatSubState
{

    var state;
    var camera;

    var randomizer;

    var currentSettings;

    var presets;

    var TextMenuList = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.TextMenuList");
    var AtlasText = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.AtlasText");

    var selectedItemIndex = 0;

    public function new(params)
    {
        super();

        selectedItemIndex = 0;

        state = params[0];
        currentSettings = params[1];

        randomizer = state.randomizer;

        selectPresetText = new AtlasText(0, 100, "Presets", "bold");
        selectPresetText.x = (FlxG.width - selectPresetText.width) / 2;

        add(selectPresetText);

        presetTextList = new TextMenuList();

        for (preset in currentSettings["presets"].keys())
        {
            var preset = preset; // Store this as a variable because the callback won't recognize it otherwise
            var presetText = presetTextList.createItem(0, 120 * presetTextList.length + 300, preset, "bold", () -> {loadPreset(preset);});
            presetText.x = 50;
        }

        add(presetTextList);
    }

    public function update(elapsed:Float):Void
    {

        if (controls.BACK)
        {
            exit();
            FunkinSound.playOnce(Paths.sound("cancelMenu"));
            return;
        }

        super.update(elapsed);

        if (controls.UI_DOWN_P)
        {

            selectedItemIndex++;

            selectPresetText.y -= 120;
            for (presetText in presetTextList) presetText.y -= 120;

            if (selectedItemIndex == presetTextList.length)
            {
                selectedItemIndex = 0;

                selectPresetText.y += 120 * presetTextList.length;
                for (presetText in presetTextList) presetText.y += 120 * presetTextList.length;
            }
        }

        if (controls.UI_UP_P)
        {

            selectedItemIndex--;

            selectPresetText.y += 120;
            for (presetText in presetTextList) presetText.y += 120;

            if (selectedItemIndex == -1)
            {
                selectedItemIndex = presetTextList.length - 1;

                selectPresetText.y -= 120 * presetTextList.length;
                for (presetText in presetTextList) presetText.y -= 120 * presetTextList.length;
            }
        }
    }

    public function loadPreset(name:String)
    {

        for (key in currentSettings["presets"][name].keys()) currentSettings[key] = currentSettings["presets"][name][key];
        
        randomizer.scriptSet("currentSettings", currentSettings);
        randomizer.scriptSet("randomizerActive", true);
        randomizer.scriptSet("usingPreset", true);

        state.exit();
    }

    public function exit():Void
    {
        remove(selectPresetText);
        remove(presetTextList);

        state.closeSubState();
    }
}