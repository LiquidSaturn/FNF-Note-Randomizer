import flixel.FlxG;

import funkin.audio.FunkinSound;

import funkin.graphics.FunkinCamera;

import funkin.modding.base.ScriptedFunkinSprite;
import funkin.modding.base.ScriptedMusicBeatSubState;

import funkin.modding.module.ModuleHandler;
import funkin.modding.module.Module;

import funkin.Paths;

import funkin.ui.options.items.NumberPreferenceItem;
import funkin.ui.options.OptionsState;
import funkin.ui.options.PreferencesMenu;

import haxe.Unserializer;

import Std;
import Math;

class RandomizerSettingsInjector extends Module
{

    public var state;

    public var inOptions = false;
    public var optionsPage;

    public var randomizerOptionPage;

    public var save;
    public var saveModule;

    public var categories = [];

    override public function new()
    {
        super("FNF Note Randomizer Settings Injector");
    }

    override public function onStateChangeEnd(event):Void
    {
        state = event.targetState;
        inOptions = Std.isOfType(state, OptionsState);

        if (!inOptions) return;

        optionsPage = state.optionsCodex.pages.get("options");

        var exitTag = "EXIT";

        var exitOption = optionsPage.items.byName.get(exitTag);
        optionsPage.items.byName.remove(exitTag);
        optionsPage.items.remove(exitOption);
        
        createOptionPage(exitOption);

        exitOption.y += 100;
        optionsPage.items.addItem(exitTag, exitOption);

        for (option in optionsPage.items.members) option.y -= 80;
    }   

    public function createOptionPage(exitOption):Void
    {
        randomizerOptionPage = state.optionsCodex.addPage("NoteRandomizer", new PreferencesMenu());

        randomizerOptionPage.onExit.add(
            function() {
                state.optionsCodex.switchPage("options");
            }
        );

        createSettings();

        optionsPage.createItem("NOTE RANDOMIZER", function() state.optionsCodex.switchPage("NoteRandomizer"));
        
        var randomizerOption = optionsPage.items.byName.get("NOTE RANDOMIZER");
        randomizerOption.y -= 100;
    }

    public function onUpdate(elapsed:Float):Void
    {
        if (!inOptions) return;
        for (category in categories) category.x = (FlxG.width - category.width) / 2;
    }

    public function createSettings():Void
    {
        randomizerOptionPage.preferenceDesc = [];
        for (item in randomizerOptionPage.items) item.destroy();
        for (item in randomizerOptionPage.preferenceItems) item.destroy();

        randomizerOptionPage.items.clear();
        randomizerOptionPage.preferenceItems.clear();

        if (save == null)
        {
            saveModule = ModuleHandler.getModule("FNF Note Randomizer Save");
            save = saveModule.scriptGet("save");
        }

        randomizerOptionPage.createPrefItemCheckbox("Auto Activate", "Automatically activates the note randomizer with the current settings", (value:Bool) -> {setSaveKey("autoActive", value);}, save["autoActive"]);
        randomizerOptionPage.createPrefItemCheckbox("Debug", "Traces a bunch of the inner \"thoughts\" of the randomizer while it's generating a chart, good to use when testing or making randomizer presets", (value:Bool) -> {setSaveKey("debug", value);}, save["debug"]);

        addCategory("Prompts");

        randomizerOptionPage.createPrefItemCheckbox("Setup SubState", "Opens a substate whenever entering PlayState that lets you select whether or not you wanna use the randomizer and if you want to use a specific preset (overwrites Auto Activate if set to true)", (value:Bool) -> {setSaveKey("openSetUpSubState", value);}, save["openSetUpSubState"]);
        randomizerOptionPage.createPrefItemCheckbox("Save Chart Prompt", "Whether the randomizer will ask you if you want to save a chart when a song finishes", (value:Bool) -> {setSaveKey("saveChartPrompt", value);}, save["saveChartPrompt"]);

        addCategory("True Random");

        randomizerOptionPage.createPrefItemCheckbox("True Random Directions", "The randomizer has systems in place to stop the charts from becoming complete spam, this removes all of that", (value:Bool) -> {setSaveKey("trueRandomDirections", value);}, save["trueRandomDirections"]);
        randomizerOptionPage.createPrefItemCheckbox("Note Stacking", "Whether or not the randomizer is allowed to stack notes directly on top of one another", (value:Bool) -> {setSaveKey("trueRandomStackNotes", value);}, save["trueRandomStackNotes"]);

        addCategory("Presets");

        addCallbackOption("Save Preset", () -> {state.openSubState(ScriptedMusicBeatSubState.init("SavePresetSubState"));});
        addCallbackOption("Load Preset", () -> {state.openSubState(ScriptedMusicBeatSubState.init("LoadPresetSubState"));});

        addCategory("Note Queue");

        createPrefItemNumber("Max Note Queue Length", "The maximum amount of notes allowed in the note queue, if set to a negative number, subtracts the value from how many strum notes each character has", (value:Int) -> {setSaveKey("maxNoteQueueLength", value);}, save["maxNoteQueueLength"], 1, 0);

        createPrefItemNumber("Note Queue Time", "The amount of time that a note is queued after being generated before it's allowed to generate again", (value:Float) -> {setSaveKey("noteQueueRemovalTime", value);}, save["noteQueueRemovalTime"], 0.01, 2);
        createPrefItemNumber("Note Queue Time (Doubles)", "The amount of time that notes found in doubles are queued after being generated before being allowed to generate again", (value:Float) -> {setSaveKey("doubleNoteQueueRemovalTime", value);}, save["doubleNoteQueueRemovalTime"], 0.01, 2);
        createPrefItemNumber("Note Queue Time (Triples)", "The amount of time that notes found in triples are queued after being generated before being allowed to generate again", (value:Float) -> {setSaveKey("tripleNoteQueueRemovalTime", value);}, save["tripleNoteQueueRemovalTime"], 0.01, 2);

        addCategory("Note Bias");

        createPrefItemPercentage("Note Bias Increase", "How much the likelihood of a note being allowed the possibility to generate will be INCREASED each time it is NOT generated", (value:Float) -> {setSaveKey("noteBiasIncrease", value);}, save["noteBiasIncrease"], -100, 100, 1);
        createPrefItemPercentage("Note Bias Decrease", "How much the likelihood of a note being allowed the possibility to generate will be DECREASED each time it IS generated", (value:Float) -> {setSaveKey("noteBiasDecrease", value);}, save["noteBiasDecrease"], -100, 100, 1);

        addCategory("Note Pattern Limits");

        createPrefItemNumber("Max Notes In Jack", "The maximum amount of notes allowed in a jack (one note being pressed repeatedly), set to a value less than 1 to uncap", (value:Int) -> {setSaveKey("maxJackLength", value);}, save["maxJackLength"], 1, 0);
        createPrefItemNumber("Max Notes In Trill", "The maximum amount of notes allowed in a trill (two notes being pressed back and forth repeatedly), set to a value less than 2 to uncap", (value:Int) -> {setSaveKey("maxTrillLength", value);}, save["maxTrillLength"], 1, 0);
        createPrefItemNumber("Max Notes In Wave", "The maximum amount of notes allowed in a wave (three notes being pressed in a pattern repeatedly), set to a value less than 3 to uncap", (value:Int) -> {setSaveKey("maxWaveLength", value);}, save["maxWaveLength"], 1, 0);
        createPrefItemNumber("Max Notes In Crossover", "The maximum amount of notes allowed in a crossover (three notes being pressed in the order of 1-2-3-2 repeatedly), set to a value less than 4 to uncap", (value:Int) -> {setSaveKey("maxCrossoverLength", value);}, save["maxCrossoverLength"], 1, 0);

        addCategory("Pattern Odds");

        createPrefItemNumber("Odds of Jack", "The chance (0-1) for a jack to be allowed the possibility of continuing by the randomizer (if the cap has not been reached)", (value:Int) -> {setSaveKey("jackOdds", value);}, save["jackOdds"], 0.01, 2);
        createPrefItemNumber("Odds of Trill", "The chance (0-1) for a trill to be allowed the possibility of continuing by the randomizer (if the cap has not been reached)", (value:Int) -> {setSaveKey("trillOdds", value);}, save["trillOdds"], 0.01, 2);
        createPrefItemNumber("Odds of Wave", "The chance (0-1) for a wave to be allowed the possibility of continuing by the randomizer (if the cap has not been reached)", (value:Int) -> {setSaveKey("waveOdds", value);}, save["waveOdds"], 0.01, 2);
        createPrefItemNumber("Odds of Crossover", "The chance (0-1) for a crossover to be allowed the possibility of continuing by the randomizer (if the cap has not been reached)", (value:Int) -> {setSaveKey("crossoverOdds", value);}, save["crossoverOdds"], 0.01, 2);

        addCategory("Diminishing Pattern Odds");

        createPrefItemNumber("Diminishing Odds of Jack", "The amount (0-1) that Odds of Jack will decrease for each successive note in the jack", (value:Int) -> {setSaveKey("diminishingJackOdds", value);}, save["diminishingJackOdds"], 0.01, 2);
        createPrefItemNumber("Diminishing Odds of Trill", "The amount (0-1) that Odds of Trill will decrease for each successive note in the trill", (value:Int) -> {setSaveKey("diminishingTrillOdds", value);}, save["diminishingTrillOdds"], 0.01, 2);
        createPrefItemNumber("Diminishing Odds of Wave", "The amount (0-1) that Odds of Wave will decrease for each successive note in the wave", (value:Int) -> {setSaveKey("diminishingWaveOdds", value);}, save["diminishingWaveOdds"], 0.01, 2);
        createPrefItemNumber("Diminishing Odds of Crossover", "The amount (0-1) that Odds of Crossover will decrease for each successive note in the wave", (value:Int) -> {setSaveKey("diminishingCrossoverOdds", value);}, save["diminishingCrossoverOdds"], 0.01, 2);

        addCategory("CAREFUL!!!");

        addCallbackOption("Reset Save", () -> {state.openSubState(ScriptedMusicBeatSubState.init("ResetSaveSubState"));});

        randomizerOptionPage.itemDesc.text = randomizerOptionPage.preferenceDesc[0];
    }

    public function addCategory(name:String):Void
    {
        var item = randomizerOptionPage.items.createItem(0, 120 * randomizerOptionPage.items.length + 35, name, "bold", () -> {}, true);
        randomizerOptionPage.preferenceDesc.push("");
        categories.push(item);
    }

    public function addCallbackOption(name:String, callback:Void->Void):Void
    {
        randomizerOptionPage.items.createItem(0, 120 * randomizerOptionPage.items.length + 35, name, "bold", callback);
        randomizerOptionPage.preferenceDesc.push("");
    }

    public function createPrefItemNumber(prefName:String, prefDesc:String, onChange:Float->Void, defaultValue:Int,
        step:Float = 0.1, precision:Int):Void
    {
        randomizerOptionPage.createPrefItemNumber(prefName, prefDesc, null, null, defaultValue, -9999, 9999, step, precision);

        var item = randomizerOptionPage.items.byName[prefName];
        item.currentValue = defaultValue;
        item.lefthandText.text = item.formatted(defaultValue);

        var precision = precision;
        var onChange = onChange;

        item.onChangeCallback = function(value:Float)
        {
            var multiplier:Float = Math.pow(10, precision);
            value = Math.round(value * multiplier) / multiplier;
            
            item.currentValue = value;
            onChange(value);
        }
    }

    function createPrefItemPercentage(prefName:String, prefDesc:String, onChange:Int->Void, defaultValue:Int, min:Int = 0, max:Int = 100, step:Int = 1):Void
    {

        randomizerOptionPage.createPrefItemPercentage(prefName, prefDesc, null, defaultValue, min, max);

        var item = randomizerOptionPage.items.byName[prefName];

        item.step = step;
        item.currentValue = defaultValue;
        item.lefthandText.text = item.formatted(defaultValue);

        var onChange = onChange;

        item.onChangeCallback = function(value:Float)
        {
            item.currentValue = value;
            onChange(value);
        }
    }

    public function setSaveKey(key:Dynamic, value:Dynamic):Void
    {
        save[key] = value;
        saveModule.scriptCall("saveSettings");
    }
}

class ResetSaveSubState extends ScriptedMusicBeatSubState
{

    var camera;

    var TextMenuList = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.TextMenuList");
    var AtlasText = Unserializer.DEFAULT_RESOLVER.resolveClass("funkin.ui.AtlasText");

    var textList;
    var questionText;
    
    override public function new()
    {
        super();

        FlxG.state.persistentUpdate = false;

        camera = new FunkinCamera("Reset Save Camera", 0, 0, FlxG.width, FlxG.height);
        FlxG.cameras.add(camera, true);
        this.cameras = [camera];

        questionText = new AtlasText(0, 100, "Reset save??", "bold");
        questionText.x = (FlxG.width - questionText.width) / 2;

        textList = new TextMenuList();

        var yes = textList.createItem(0, 460, "Yes", "bold", resetSave);
        yes.x = (FlxG.width - yes.width) / 2;

        var no = textList.createItem(0, 560, "No", "bold", () -> {exit(); FunkinSound.playOnce(Paths.sound("cancelMenu"));});
        no.x = (FlxG.width - no.width) / 2;

        add(questionText);
        add(textList);
    }

    override public function update(elapsed:Float):Void
    {
        if (controls.BACK)
        {
            exit();
            FunkinSound.playOnce(Paths.sound("cancelMenu"));
            return;
        }

        super.update(elapsed);
    }

    public function resetSave():Void
    {
        var saveModule = ModuleHandler.getModule("FNF Note Randomizer Save");

        var save = saveModule.scriptGet("save");
        var defaultSave = saveModule.scriptGet("defaultSave");

        var settingsModule = ModuleHandler.getModule("FNF Note Randomizer Settings Injector");

        for (setting in defaultSave.keys()) save[setting] = defaultSave[setting];

        settingsModule.scriptCall("createSettings");

        exit();
    }

    public function exit():Void
    {
        FlxG.cameras.remove(camera);

        FlxG.state.closeSubState();
        FlxG.state.persistentUpdate = true;
    }
}